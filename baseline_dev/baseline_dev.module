<?php

/**
 * Provides a baseline for content during development.
 */

/**
 * Builds the development baseline.
 */
function baseline_dev_build($add_metadata = FALSE) {
  // Generate test users.
  baseline_dev_generate_users();
  // Generate test terms.
  baseline_dev_generate_vocabularies();
  // Generate test content.
  baseline_dev_generate_content($add_metadata);
}

/**
 * Creates test users.
 *
 * @param bool $cleanup
 *   (optional) Delete users previously generated by baseline_dev. Defaults to
 *   TRUE.
 * @param int $number_of_users_per_role
 *   (optional) Number of users for each role to generate. Defaults to 3 users
 *   per role.
 */
function baseline_dev_generate_users($cleanup = TRUE, $number_of_users_per_role = 3) {
  if ($cleanup) {
    baseline_dev_clean_users();
  }

  $roles = user_roles(TRUE);
  $uids_created = array();
  $names = array();
  foreach ($roles as $role) {
    $i = 1;
    while ($i <= $number_of_users_per_role) {
      $role_object = user_role_load_by_name($role);
      $role_name = strtolower(str_replace(" ", "_", $role));
      $name = "test_" . $role_name . "_" . $i;
      // Building the user array:
      $ua = array(
        'mail' => "$name@localhost.dev",
        'name' => "$name",
        'pass' => "$name",
        'status' => 1,
        'roles' => array(
          $role_object->rid => $role_object->name
        ),
      );
      // Create the account
      $saved_user = user_save(null, $ua);
      $uids_created[] = $saved_user->uid;
      $i++;
    }
  }
  variable_set('baseline_dev_generated_uids', $uids_created);
}

/**
 * Generates test content.
 *
 * By default 200 nodes of all types and all languages are generated.
 * Modules can implement baseline_dev_generate_content_info_alter() for specific
 * requirements.
 */
function baseline_dev_generate_content($add_metadata = FALSE, $generate_info = NULL) {
  $generate_info = ($generate_info == NULL) ? baseline_dev_generate_content_info() : $generate_info;
  module_load_include('inc', 'devel_generate', 'devel_generate');
  devel_generate_content_kill(array('node_types' => array_keys(node_type_get_types())));
  foreach (language_list() as $key => $value) {
    $languages[] = $key;
  }
  for ($i = 0; $i < $generate_info['num_nodes']; $i++) {
    $node = new stdClass();
    $node->nid = NULL;
    $node->type = array_rand($generate_info['node_types']);
    node_object_prepare($node);
    $users = $generate_info['users'];
    $node->uid = $users[array_rand($users)];
    $node->language = $languages[array_rand($languages)];
    $type = node_type_get_type($node);
    $node->title = $type->has_title ? devel_create_greeking(mt_rand(2, $generate_info['title_length']), TRUE) : '';
    if ($add_metadata) {
      $node->title .= " ($node->language) ($node->type)";
    }
    $node->revision = mt_rand(0,1);
    $node->promote = mt_rand(0, 1);
    $generate_info['time_range'] = isset($generate_info['time_range']) ? $generate_info['time_range'] : 0;
    if (module_exists('sites')) {
      $node->sites = array();
    }
    $node->created = REQUEST_TIME - mt_rand(0, $generate_info['time_range']);
    // A flag to let hook_nodeapi() implementations know that this is a generated node.
    $node->devel_generate = $generate_info;
    // Populate all core fields on behalf of field.module.
    module_load_include('inc', 'devel_generate', 'devel_generate.fields');
    devel_generate_fields($node, 'node', $node->type);
    // Allow other modules to change some thing before saving.
    drupal_alter('baseline_dev_generate_content_presave', $node, $node->type);
    node_save($node);
  }
}

/**
 * Generates test taxonomy terms.
 *
 * By default 50 terms are generated.
 * Modules can implement baseline_dev_generate_taxonomy_info_alter() for specific
 * requirements.
 */
function baseline_dev_generate_vocabularies($generate_info = NULL) {
  $generate_info = ($generate_info == NULL) ? baseline_dev_generate_taxonomy_info() : $generate_info;
  module_load_include('inc', 'devel_generate');
  devel_generate_terms($generate_info['number_of_terms'], $generate_info['vocabularies'], $generate_info['title_length']);
}

/**
 * Provides info for devel_generate().
 *
 * @return  Array
 *   Info for devel_generate().
 */
function baseline_dev_generate_content_info() {
  $node_types = drupal_map_assoc(array_keys(node_type_get_types()));
  $default_config = array(
    'node_types'      => $node_types,
    'kill_content'    => 1,
    'num_nodes'       => 400,
    //'time_range'      => 604800,
    'time_range'      => 144000000,
    'max_comments'    => 0,
    'title_length'    => 4,
    'add_alias'       => 0,
    'add_statistics'  => 1,
    'add_language' => array (
      'und' => 'und'
    ),
    'users' => array(
      0 => 0,
    )
  );
  drupal_alter('baseline_dev_generate_content_info', $default_config);
  return $default_config;
}

/**
 * Provides info for devel_generate().
 *
 * @return  Array
 *   Info for devel_generate().
 */
function baseline_dev_generate_taxonomy_info() {
  $vocabularies = taxonomy_get_vocabularies();
  $default_config = array(
    'vocabularies'      => $vocabularies,
    'title_length'      => count($vocabularies) * 10,
    'number_of_terms'   => 50,
    'delete_all_terms'  => 1.
  );

  drupal_alter('baseline_dev_generate_taxonomy_info', $default_config);
  return $default_config;
}

/**
 * Disables development modules.
 */
function baseline_dev_disable_dev_modules($modules = NULL) {
  $modules = ($modules != NULL) ? (array) $modules : array('context_ui', 'devel', 'devel_generate', 'field_ui', 'views_ui');
  module_disable($modules);
  drupal_set_message(t('Disable developer modules.'));
}

/**
 * Removes generated test users.
 */
function baseline_dev_clean_users() {
  user_delete_multiple(variable_get('baseline_dev_generated_uids', array()));
}
